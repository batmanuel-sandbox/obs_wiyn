#<?cfg paf policy ?>

needCalibRegistry: false

camera:        "../whirc/description/Whirc_geom.paf"
defects:    "../whirc/description/defects"
defaultLevel: "Ccd"

exposures: {
    raw: {
        template:    "%(date)d/obj_%(expnum)d.fits"
        python:     "lsst.afw.image.DecoratedImageU"
        persistable:         "DecoratedImageU"
        storage:     "FitsStorage"
        level:        "Ccd"
        tables:       "raw"
        columns:      "expnum"
    }
    postISRCCD: {
        template:    "work/%(date)d/obj_%(expnum)d.wp.sky.flat.fits"
        python:        "lsst.afw.image.expnumF"
        persistable:        "expnumF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:       "raw"
        columns:      "expnum"
    }
    calexp: {
        template:      "work/%(date)d/obj_%(filter)s_%(expnum)d.fits"
        python:        "lsst.afw.image.expnumF"
        persistable:        "expnumF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:       "raw"
        columns:      "expnum"
    }
    biasOut: {
        template:    "calib/%(date)d/bias_%(expnum)d.fits"
        python:        "lsst.afw.image.expnumF"
        persistable:        "expnumF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:       "raw"
        columns:      "expnum"
    }
    darkOut: {
        template:    "dark/%(date)d/dark_%(expnum)d.fits"
        python:        "lsst.afw.image.expnumF"
        persistable:        "expnumF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:       "raw"
        columns:      "expnum"
    }
    flatOut: {
        template:    "flat/%(date)d/flat_%(filter)_%(expnum)d.fits"
        python:        "lsst.afw.image.expnumF"
        persistable:        "expnumF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:       "raw"
        columns:      "expnum"
    }
    coaddTempExp: {
        template:    "coaddTempExp/$(date)d/coadd_%(filter)s_%(expnum)d.fits"
        python:      "lsst.afw.image.expnumF"
        persistable: "expnumF"
        storage:     "FitsStorage"
        tables:       "raw"
        columns:      "expnum"
    }
}

calibrations: {
    bias: {
        template:    "bias/%(date)d/bias_%(expnum)d.fits"
        python:        "lsst.afw.image.expnumF"
        persistable:        "expnumF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:       "bias"
        columns:     "datetime"
    }
    dark: {
        template:    "dark/%(date)d/dark_%(expnum)d.fits"
        python:        "lsst.afw.image.expnumF"
        persistable:        "expnumF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:       "dark"
        columns:     "datetime"
    }
    flat: {
        template:    "flat/%(date)d/flat_%(filter)_%(expnum)d.fits"
        python:        "lsst.afw.image.expnumF"
        persistable:        "expnumF"
        storage:    "FitsStorage"
        level:        "Ccd"
        reference:    "raw"
        tables:       "flat"
        columns:      "filter"
    }
}

datasets: {
    ccdexpnumId: {
        template:     "ignored"
        # Provide something to import, although we actually return a tuple
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    ccdexpnumId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return a tuple
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    goodSeeingCoaddId: {
        template:     "ignored"
        # Provide something to import, although we actually return a Long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    goodSeeingCoaddId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepCoaddId: {
        template:     "ignored"
        # Provide something to import, although we actually return a Long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepCoaddId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    chiSquaredCoaddId: {
        template:     "ignored"
        # Provide something to import, although we actually return a Long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    chiSquaredCoaddId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }

    icSrc: {
        template:      "work/%(date)d/ICSRC-%(expnum)d_%(filter)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    icMatch: {
        template:      "work/%(date)d/ICMATCH_%(expnum)d_%(filter)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:        "BaseCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    log: {
        template:      "logs/%(date)s/run.log"
        python:        "str"
        persistable:   "None"
        storage:       "TextStorage"
    }
    logDir: {
        template:      "logs/%(date)s/"
        python:        "str"
        persistable:   "None"
        storage:       "None"
    }
}
