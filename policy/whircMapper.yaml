needCalibRegistry: false

defaultLevel: field

exposures:
  raw:
    template: raw/%(night)08d/obj_%(expnum)03d.fits
    python: lsst.afw.image.DecoratedImageI
    persistable: DecoratedImageI
    storage: FitsStorage
    level: Ccd
    tables: raw
    columns: expnum
  postISRCCD:
    template: workspace/%(night)08d/obj_%(expnum)03d.wp.sky.flat.fits
    python: lsst.afw.image.ExposureF
    persistable: ExposureF
    storage: FitsStorage
    level: Ccd
    tables: raw
    columns: expnum
  stack:
    template: stack/%(field)s_%(seq)s_%(filter)s_%(night)08d.fits
    python: lsst.afw.image.ExposureF
    persistable: ExposureF
    storage: FitsStorage
    level: field
    tables: stack
    columns:
      - field
      - seq
      - filter
      - night
  calexp:
    template: calexp/%(field)_%(seq)_%(filter)s_%(night)08d.fits
    python: lsst.afw.image.ExposureF
    persistable: ExposureF
    storage: FitsStorage
    level: field
    tables: stack
    columns:
      - field
      - seq
      - filter
      - night
  biasOut:
    template: calib/%(night)08d/bias_%(expnum)03d.fits
    python: lsst.afw.image.ExposureF
    persistable: ExposureF
    storage: FitsStorage
    level: Ccd
    tables: raw
    columns: expnum
  darkOut:
    template: calib/%(night)08d/dark_%(expnum)03d.fits
    python: lsst.afw.image.ExposureF
    persistable: ExposureF
    storage: FitsStorage
    level: Ccd
    tables: raw
    columns: expnum
  flatOut:
    template: calib/%(night)08d/flat_%(filter)_%(expnum)03d.fits
    python: lsst.afw.image.ExposureF
    persistable: ExposureF
    storage: FitsStorage
    level: Ccd
    tables: raw
    columns: expnum
  coaddTempExp:
    template: coaddTempExp/%(night)08d/coadd_%(filter)s_%(expnum)03d.fits
    python: lsst.afw.image.ExposureF
    persistable: ExposureF
    storage: FitsStorage
    tables: raw
    columns: expnum
  deepCoadd_directWarp:
    # template: deepCoadd/%(filter)s/%(tract)d/%(patch)s/warp-%(filter)s-%(tract)d-%(patch)s-%(field)s_%(seq)s_%(filter)s_%(night)08d.fits
    template: deepCoadd/%(filter)s/%(tract)d/%(patch)s/warp-%(filter)s-%(tract)d-%(patch)s.fits

calibrations:
  dark:  # master dark frame in the calibration registry, as produced by constructDark.py
    columns:
      - date
    template: calib/%(night)08d/dark.fits
    python: lsst.afw.image.ExposureF
    persistable: ExposureF
    storage: FitsStorage
    level: Ccd
    tables: dark
  flat:  # master flat frame in the calibration registry, as produced by constructFlat.py
    columns:
    - filter
    template: calib/%(night)08d/flat_%(filter).fits
    python: lsst.afw.image.ExposureF
    persistable: ExposureF
    storage: FitsStorage
    level: Ccd
    reference: raw
    tables: flat

datasets:
  ccdexpnumId:
    template: ignored
    # Provide something to import, although we actually return a tuple
    python: lsst.daf.base.PropertySet
    persistable: ignored
    storage: ignored
    tables: raw
  ccdexpnumId_bits:
    template: ignored
    # Provide something to import, although we actually return a tuple
    python: lsst.daf.base.PropertySet
    persistable: ignored
    storage: ignored
    tables: raw
  goodSeeingCoaddId:
    template: ignored
    # Provide something to import, although we actually return a Long
    python: lsst.daf.base.PropertySet
    persistable: ignored
    storage: ignored
    tables: raw
  goodSeeingCoaddId_bits:
    template: ignored
    # Provide something to import, although we actually return an int
    python: lsst.daf.base.PropertySet
    persistable: ignored
    storage: ignored
    tables: raw
  deepCoaddId:
    template: ignored
    # Provide something to import, although we actually return a Long
    python: lsst.daf.base.PropertySet
    persistable: ignored
    storage: ignored
    tables: raw
  deepCoaddId_bits:
    template: ignored
    # Provide something to import, although we actually return an int
    python: lsst.daf.base.PropertySet
    persistable: ignored
    storage: ignored
    tables: raw
  chiSquaredCoaddId:
    template: ignored
    # Provide something to import, although we actually return a Long
    python: lsst.daf.base.PropertySet
    persistable: ignored
    storage: ignored
    tables: raw
  chiSquaredCoaddId_bits:
    template: ignored
    # Provide something to import, although we actually return an int
    python: lsst.daf.base.PropertySet
    persistable: ignored
    storage: ignored
    tables: raw

  icSrc:
    template: icSrc/ICSRC-%(field)s_%(seq)s_%(filter)s_%(night)08d.fits
    python: lsst.afw.table.SourceCatalog
    persistable: SourceCatalog
    storage: FitsCatalogStorage
    tables: raw
    tables: raw_skyTile
  icMatch:
    template: icMatch/%(night)08d/ICMATCH_%(seq)s_%(filter)s_%(night)08d.fits
    python: lsst.afw.table.BaseCatalog
    persistable: BaseCatalog
    storage: FitsCatalogStorage
    tables: raw
    tables: raw_skyTile
  src:
    template: src/SRC-%(field)s_%(seq)s_%(filter)s_%(night)08d.fits
    python: lsst.afw.table.SourceCatalog
    persistable: SourceCatalog
    storage: FitsCatalogStorage
    tables: raw
    tables: raw_visit
  transformed_src:
    template: transformed_src/TRANSFORMEDSRC-%(field)s_%(seq)s_%(filter)s_%(night)08d.fits
    python: lsst.afw.table.BaseCatalog
    persistable: BaseCatalog
    storage: FitsCatalogStorage
    tables: raw
    tables: raw_visit
  transformed_src_schema:
    template: schema/transformed_src.fits
    python: lsst.afw.table.BaseCatalog
    persistable: BaseCatalog
    storage: FitsCatalogStorage
    tables: raw
    tables: raw_visit
  src_schema:
    template: schema/src.fits
    python: lsst.afw.table.SourceCatalog
    persistable: SourceCatalog
    storage: FitsCatalogStorage
    tables: raw
    tables: raw_visit
  log:
    template: logs/%(night)s/run.log
    python: str
    persistable: None
    storage: TextStorage
  logDir:
    template: logs/%(night)s/
    python: str
    persistable: None
    storage: None

  processCcd_metadata:
    template: processCcd_metadata/%(field)s_%(seq)s_%(filter)s_%(night)08d.boost
